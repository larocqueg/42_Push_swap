#include <stdio.h>
#include <stdlib.h>

// Assuming t_stack and push are defined properly.
typedef struct s_stack {
    int value;
    struct s_stack *next;
} t_stack;

t_stack *new_node(int value) {
    t_stack *node = malloc(sizeof(t_stack));
    if (!node)
        return NULL;
    node->value = value;
    node->next = NULL;
    return node;
}

void print_stack(t_stack *stack) {
    while (stack) {
        printf("%d ", stack->value);
        stack = stack->next;
    }
    printf("\n");
}

void free_stack(t_stack **stack) {
    t_stack *temp;
    while (*stack) {
        temp = *stack;
        *stack = (*stack)->next;
        free(temp);
    }
}

int main() {
    t_stack *stack_a = NULL;
    t_stack *stack_b = NULL;

    // Create stack_a with values 1, 2, 3
    for (int i = 3; i > 0; i--) {
        t_stack *node = new_node(i);
        if (!node) {
            fprintf(stderr, "Memory allocation failed\n");
            free_stack(&stack_a);
            free_stack(&stack_b);
            return 1;
        }
        node->next = stack_a;
        stack_a = node;
    }

    printf("Initial stack_a: ");
    print_stack(stack_a);

    // Push the top of stack_a to stack_b
    push(&stack_b, &stack_a);

    printf("After 1st push:\n");
    printf("stack_a: ");
    print_stack(stack_a);
    printf("stack_b: ");
    print_stack(stack_b);

    // Push again
    push(&stack_b, &stack_a);

    printf("After 2nd push:\n");
    printf("stack_a: ");
    print_stack(stack_a);
    printf("stack_b: ");
    print_stack(stack_b);

    // Free all memory
    free_stack(&stack_a);
    free_stack(&stack_b);

    return 0;
}
